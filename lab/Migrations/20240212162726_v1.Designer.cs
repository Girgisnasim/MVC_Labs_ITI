// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lab.Models;

#nullable disable

namespace lab.Migrations
{
    [DbContext(typeof(ITIContext))]
    [Migration("20240212162726_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("lab.Models.Department", b =>
                {
                    b.Property<int>("Dnum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Dnum"));

                    b.Property<string>("Dname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MGRSSN")
                        .HasColumnType("int");

                    b.HasKey("Dnum");

                    b.HasIndex("MGRSSN")
                        .IsUnique()
                        .HasFilter("[MGRSSN] IS NOT NULL");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("lab.Models.Dependent", b =>
                {
                    b.Property<int?>("ESSN")
                        .HasColumnType("int");

                    b.Property<string>("Dendent_name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Bdate")
                        .HasColumnType("date");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ESSN", "Dendent_name");

                    b.ToTable("Dependent");
                });

            modelBuilder.Entity("lab.Models.Employee", b =>
                {
                    b.Property<int>("SSN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SSN"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Bdate")
                        .HasColumnType("date");

                    b.Property<int?>("Dno")
                        .HasColumnType("int");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Superssn")
                        .HasColumnType("int");

                    b.HasKey("SSN");

                    b.HasIndex("Dno");

                    b.HasIndex("Superssn");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("lab.Models.Project", b =>
                {
                    b.Property<int>("Pnumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pnumber"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Dnum")
                        .HasColumnType("int");

                    b.Property<string>("Plocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pnumber");

                    b.HasIndex("Dnum");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("lab.Models.Works_for", b =>
                {
                    b.Property<int?>("ESSn")
                        .HasColumnType("int");

                    b.Property<int?>("Pno")
                        .HasColumnType("int");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.HasKey("ESSn", "Pno");

                    b.HasIndex("Pno");

                    b.ToTable("Works_For");
                });

            modelBuilder.Entity("lab.Models.Department", b =>
                {
                    b.HasOne("lab.Models.Employee", "Leader")
                        .WithOne("Manage")
                        .HasForeignKey("lab.Models.Department", "MGRSSN");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("lab.Models.Dependent", b =>
                {
                    b.HasOne("lab.Models.Employee", "EmpDependent")
                        .WithMany("DependentEmployee")
                        .HasForeignKey("ESSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpDependent");
                });

            modelBuilder.Entity("lab.Models.Employee", b =>
                {
                    b.HasOne("lab.Models.Department", "WorkIn")
                        .WithMany("EmployeeDapatrment")
                        .HasForeignKey("Dno");

                    b.HasOne("lab.Models.Employee", "suber")
                        .WithMany("groub")
                        .HasForeignKey("Superssn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkIn");

                    b.Navigation("suber");
                });

            modelBuilder.Entity("lab.Models.Project", b =>
                {
                    b.HasOne("lab.Models.Department", "DeptProject")
                        .WithMany("ProjectsDepatrment")
                        .HasForeignKey("Dnum");

                    b.Navigation("DeptProject");
                });

            modelBuilder.Entity("lab.Models.Works_for", b =>
                {
                    b.HasOne("lab.Models.Employee", "EmpWorkFor")
                        .WithMany("worksForEmployee")
                        .HasForeignKey("ESSn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lab.Models.Project", "ProjWorkFor")
                        .WithMany("WorkForProject")
                        .HasForeignKey("Pno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpWorkFor");

                    b.Navigation("ProjWorkFor");
                });

            modelBuilder.Entity("lab.Models.Department", b =>
                {
                    b.Navigation("EmployeeDapatrment");

                    b.Navigation("ProjectsDepatrment");
                });

            modelBuilder.Entity("lab.Models.Employee", b =>
                {
                    b.Navigation("DependentEmployee");

                    b.Navigation("Manage")
                        .IsRequired();

                    b.Navigation("groub");

                    b.Navigation("worksForEmployee");
                });

            modelBuilder.Entity("lab.Models.Project", b =>
                {
                    b.Navigation("WorkForProject");
                });
#pragma warning restore 612, 618
        }
    }
}
